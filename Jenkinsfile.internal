#!groovy

/*
=============
Prerequisites
=============
* Maven tool installation configured as M3
* JDK tool installation configured as JDK8
* Global environment variable EMAIL_RECIPIENTS set
* Jenkins plugins installed:
- https://plugins.jenkins.io/jacoco
- https://plugins.jenkins.io/javadoc
- https://plugins.jenkins.io/timestamper
- https://plugins.jenkins.io/warnings-ng
*/

pipeline {
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timestamps()
    }
    agent any
    tools {
        maven 'M3'
    }
    stages {
        stage('Build') {
            steps {
                mvn 'package -DskipUTs'
                archiveArtifacts artifacts: 'target/*.hpi', fingerprint: true
            }
        }
        stage('Static Code Analysis') {
            steps {
                mvn 'checkstyle:check pmd:check pmd:cpd-check spotbugs:check'
                recordIssues(tools: [
                    checkStyle(pattern: 'target/checkstyle-result.xml'),
                    pmdParser(pattern: 'target/pmd.xml'),
                    cpd(pattern: 'target/cpd.xml'),
                    spotBugs(pattern: 'target/spotbugsXml.xml', useRankAsPriority: true),
                    taskScanner(includePattern: 'src/**/*.java', normalTags: 'TODO', highTags: 'FIXME')])
            }
        }
        stage('Unit Tests') {
            steps {
                mvn 'jacoco:prepare-agent surefire:test -Dsurefire.useFile=false'
                junit 'target/surefire-reports/TEST-*.xml'
                jacoco exclusionPattern: '**/Messages.class', execPattern: 'target/jacoco.exec'
            }
        }
        stage('Docs') {
            steps {
                mvn 'javadoc:javadoc'
                step([$class: 'JavadocArchiver', javadocDir: 'target/site/apidocs', keepAll: false])
            }
        }
    }
    post {
        unsuccessful {
            mail to: "${env.EMAIL_RECIPIENTS}",
                subject: "${JOB_NAME} - Build #${BUILD_NUMBER} - ${currentBuild.currentResult}",
                body: "Check console output at ${BUILD_URL} to view the results."
        }
    }
}

def mvn(def args) {
    def mvnHome = tool 'M3'
    def javaHome = tool 'JDK8'
    withEnv(["JAVA_HOME=${javaHome}", "PATH+MAVEN=${mvnHome}/bin:${env.JAVA_HOME}/bin"]) {
        if (isUnix()) {
            sh "${mvnHome}/bin/mvn ${args} -B -V -U -e"
        } else {
            bat "${mvnHome}\\bin\\mvn ${args} -B -V -U -e"
        }
    }
}
